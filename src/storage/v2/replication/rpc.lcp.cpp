// -*- buffer-read-only: t; -*-
// vim: readonly
// DO NOT EDIT! Generated using LCP from
// '/home/hjm/vldb/memgraph/src/storage/v2/replication/rpc.lcp'

#include "/home/aeong/src/storage/v2/replication/rpc.hpp"

namespace storage {

void AppendDeltasReq::Save(const AppendDeltasReq &self, slk::Builder *builder) {
  slk::Save(self, builder);
}
void AppendDeltasReq::Load(AppendDeltasReq *self, slk::Reader *reader) {
  slk::Load(self, reader);
}
void AppendDeltasRes::Save(const AppendDeltasRes &self, slk::Builder *builder) {
  slk::Save(self, builder);
}
void AppendDeltasRes::Load(AppendDeltasRes *self, slk::Reader *reader) {
  slk::Load(self, reader);
}
void HeartbeatReq::Save(const HeartbeatReq &self, slk::Builder *builder) {
  slk::Save(self, builder);
}
void HeartbeatReq::Load(HeartbeatReq *self, slk::Reader *reader) {
  slk::Load(self, reader);
}
void HeartbeatRes::Save(const HeartbeatRes &self, slk::Builder *builder) {
  slk::Save(self, builder);
}
void HeartbeatRes::Load(HeartbeatRes *self, slk::Reader *reader) {
  slk::Load(self, reader);
}
void SnapshotReq::Save(const SnapshotReq &self, slk::Builder *builder) {
  slk::Save(self, builder);
}
void SnapshotReq::Load(SnapshotReq *self, slk::Reader *reader) {
  slk::Load(self, reader);
}
void SnapshotRes::Save(const SnapshotRes &self, slk::Builder *builder) {
  slk::Save(self, builder);
}
void SnapshotRes::Load(SnapshotRes *self, slk::Reader *reader) {
  slk::Load(self, reader);
}
void WalFilesReq::Save(const WalFilesReq &self, slk::Builder *builder) {
  slk::Save(self, builder);
}
void WalFilesReq::Load(WalFilesReq *self, slk::Reader *reader) {
  slk::Load(self, reader);
}
void WalFilesRes::Save(const WalFilesRes &self, slk::Builder *builder) {
  slk::Save(self, builder);
}
void WalFilesRes::Load(WalFilesRes *self, slk::Reader *reader) {
  slk::Load(self, reader);
}
void CurrentWalReq::Save(const CurrentWalReq &self, slk::Builder *builder) {
  slk::Save(self, builder);
}
void CurrentWalReq::Load(CurrentWalReq *self, slk::Reader *reader) {
  slk::Load(self, reader);
}
void CurrentWalRes::Save(const CurrentWalRes &self, slk::Builder *builder) {
  slk::Save(self, builder);
}
void CurrentWalRes::Load(CurrentWalRes *self, slk::Reader *reader) {
  slk::Load(self, reader);
}

} // namespace storage
const utils::TypeInfo storage::AppendDeltasReq::kType{
    0xDD5A1DDDC087AFBFULL, "AppendDeltasReq", nullptr};

const utils::TypeInfo storage::AppendDeltasRes::kType{
    0xDD5A1FDDC087B325ULL, "AppendDeltasRes", nullptr};

const utils::TypeInfo storage::HeartbeatReq::kType{0xFBF0749A1B5374DEULL,
                                                   "HeartbeatReq", nullptr};

const utils::TypeInfo storage::HeartbeatRes::kType{0xFBF0729A1B537178ULL,
                                                   "HeartbeatRes", nullptr};

const utils::TypeInfo storage::SnapshotReq::kType{0xF586E4CCD52DF5EULL,
                                                  "SnapshotReq", nullptr};

const utils::TypeInfo storage::SnapshotRes::kType{0xF586C4CCD52DBF8ULL,
                                                  "SnapshotRes", nullptr};

const utils::TypeInfo storage::WalFilesReq::kType{0x5510719D5711825BULL,
                                                  "WalFilesReq", nullptr};

const utils::TypeInfo storage::WalFilesRes::kType{0x5510739D571185C1ULL,
                                                  "WalFilesRes", nullptr};

const utils::TypeInfo storage::CurrentWalReq::kType{0xFC9C6F66E31421D7ULL,
                                                    "CurrentWalReq", nullptr};

const utils::TypeInfo storage::CurrentWalRes::kType{0xFC9C7166E314253DULL,
                                                    "CurrentWalRes", nullptr};

// Autogenerated SLK serialization code
namespace slk {

// Serialize code for CurrentWalRes

void Save(const storage::CurrentWalRes &self, slk::Builder *builder) {
  slk::Save(self.success, builder);
  slk::Save(self.current_commit_timestamp, builder);
}

void Load(storage::CurrentWalRes *self, slk::Reader *reader) {
  slk::Load(&self->success, reader);
  slk::Load(&self->current_commit_timestamp, reader);
}

// Serialize code for CurrentWalReq

void Save(const storage::CurrentWalReq &self, slk::Builder *builder) {}

void Load(storage::CurrentWalReq *self, slk::Reader *reader) {}

// Serialize code for WalFilesRes

void Save(const storage::WalFilesRes &self, slk::Builder *builder) {
  slk::Save(self.success, builder);
  slk::Save(self.current_commit_timestamp, builder);
}

void Load(storage::WalFilesRes *self, slk::Reader *reader) {
  slk::Load(&self->success, reader);
  slk::Load(&self->current_commit_timestamp, reader);
}

// Serialize code for WalFilesReq

void Save(const storage::WalFilesReq &self, slk::Builder *builder) {
  slk::Save(self.file_number, builder);
}

void Load(storage::WalFilesReq *self, slk::Reader *reader) {
  slk::Load(&self->file_number, reader);
}

// Serialize code for SnapshotRes

void Save(const storage::SnapshotRes &self, slk::Builder *builder) {
  slk::Save(self.success, builder);
  slk::Save(self.current_commit_timestamp, builder);
}

void Load(storage::SnapshotRes *self, slk::Reader *reader) {
  slk::Load(&self->success, reader);
  slk::Load(&self->current_commit_timestamp, reader);
}

// Serialize code for SnapshotReq

void Save(const storage::SnapshotReq &self, slk::Builder *builder) {}

void Load(storage::SnapshotReq *self, slk::Reader *reader) {}

// Serialize code for HeartbeatRes

void Save(const storage::HeartbeatRes &self, slk::Builder *builder) {
  slk::Save(self.success, builder);
  slk::Save(self.current_commit_timestamp, builder);
  slk::Save(self.epoch_id, builder);
}

void Load(storage::HeartbeatRes *self, slk::Reader *reader) {
  slk::Load(&self->success, reader);
  slk::Load(&self->current_commit_timestamp, reader);
  slk::Load(&self->epoch_id, reader);
}

// Serialize code for HeartbeatReq

void Save(const storage::HeartbeatReq &self, slk::Builder *builder) {
  slk::Save(self.main_commit_timestamp, builder);
  slk::Save(self.epoch_id, builder);
}

void Load(storage::HeartbeatReq *self, slk::Reader *reader) {
  slk::Load(&self->main_commit_timestamp, reader);
  slk::Load(&self->epoch_id, reader);
}

// Serialize code for AppendDeltasRes

void Save(const storage::AppendDeltasRes &self, slk::Builder *builder) {
  slk::Save(self.success, builder);
  slk::Save(self.current_commit_timestamp, builder);
}

void Load(storage::AppendDeltasRes *self, slk::Reader *reader) {
  slk::Load(&self->success, reader);
  slk::Load(&self->current_commit_timestamp, reader);
}

// Serialize code for AppendDeltasReq

void Save(const storage::AppendDeltasReq &self, slk::Builder *builder) {
  slk::Save(self.previous_commit_timestamp, builder);
  slk::Save(self.seq_num, builder);
}

void Load(storage::AppendDeltasReq *self, slk::Reader *reader) {
  slk::Load(&self->previous_commit_timestamp, reader);
  slk::Load(&self->seq_num, reader);
}

} // namespace slk